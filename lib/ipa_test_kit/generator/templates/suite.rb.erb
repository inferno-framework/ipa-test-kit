require 'inferno/dsl/oauth_credentials'
require 'smart_app_launch_test_kit'

require_relative '../../version'
require_relative '<%= capability_statement_file_name %>'
require_relative '<%= public_launch_file_name %>'
require_relative '../../provenance_validator'
<% group_file_list.each do |file_name| %>require_relative '<%= file_name %>'
<% end %>
module IpaTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::TestSuite
      title '<%= title %>'
      description %(
        This test suite evaluates the ability of a system to support applications
        acting on behalf of patients to access clinical records using a FHIR R4 API
        in accordance to the [International Patient Access Implementation Guide (IPA IG)](https://www.hl7.org/fhir/uv/ipa/).
        
        It accomplishes this by simulating requests performed by a realistic IPA Requestor
        and validating responses based on requirements specified within the IPA IG and
        the base FHIR specification.

        Resources are validated with the FHIR Java validator using `tx.fhir.org`
        as the terminology server.
      )
      version VERSION

      VALIDATION_MESSAGE_FILTERS = [
        %r{Sub-extension url 'introspect' is not defined by the Extension http://fhir-registry\.smarthealthit\.org/StructureDefinition/oauth-uris},
        %r{Sub-extension url 'revoke' is not defined by the Extension http://fhir-registry\.smarthealthit\.org/StructureDefinition/oauth-uris},
        /Observation\.effective\.ofType\(Period\): .*vs-1:/, # Invalid invariant in FHIR v4.0.1
      ].freeze

      def self.metadata
        @metadata ||= YAML.load_file(File.join(__dir__, 'metadata.yml'), aliases: true)[:groups].map do |raw_metadata|
            Generator::GroupMetadata.new(raw_metadata)
          end
      end

      validator do
        url ENV.fetch('<%= validator_env_name %>', 'http://validator_service:4567')
        exclude_message do |message|
          VALIDATION_MESSAGE_FILTERS.any? { |filter| filter.match? message.message }
        end

        perform_additional_validation do |resource, profile_url|
          ProvenanceValidator.validate(resource) if resource.instance_of?(FHIR::Provenance)
        end
      end

      id :<%= suite_id %>


      input :url,
        title: 'FHIR Endpoint',
        description: 'URL of the FHIR endpoint'

      fhir_client do
        url :url
        oauth_credentials :standalone_smart_credentials
      end

      group from: :<%= public_launch_group_id %>

      group from: :<%= capability_statement_group_id %>
  <% group_id_list.each do |id| %>
      group from: :<%= id %><% end %>
    end
  end
end
