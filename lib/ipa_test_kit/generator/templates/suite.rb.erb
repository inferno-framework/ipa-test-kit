require 'inferno/dsl/oauth_credentials'

require_relative '../../version'
require_relative '<%= capability_statement_file_name %>'
require_relative '../../provenance_validator'
<% group_file_list.each do |file_name| %>require_relative '<%= file_name %>'
<% end %>
module IpaTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::TestSuite
      title '<%= title %>'
      description %(
        The IPA Test Kit tests systems for their conformance to the
        IPA Implementation Guide.

        Resources are validated with the FHIR Java validator using `tx.fhir.org`
        as the terminology server.
      )
      version VERSION

      VALIDATION_MESSAGE_FILTERS = [
      ].freeze

      def self.metadata
        @metadata ||= YAML.load_file(File.join(__dir__, 'metadata.yml'), aliases: true)[:groups].map do |raw_metadata|
            Generator::GroupMetadata.new(raw_metadata)
          end
      end

      validator do
        url ENV.fetch('<%= validator_env_name %>', 'http://validator_service:4567')
        exclude_message do |message|
          VALIDATION_MESSAGE_FILTERS.any? { |filter| filter.match? message.message }
        end

        perform_additional_validation do |resource, profile_url|
          ProvenanceValidator.validate(resource) if resource.instance_of?(FHIR::Provenance)
        end
      end

      id :<%= suite_id %>


      input :url,
        title: 'FHIR Endpoint',
        description: 'URL of the FHIR endpoint'
      input :smart_credentials,
        title: 'OAuth Credentials',
        type: :oauth_credentials,
        optional: true

      fhir_client do
        url :url
        oauth_credentials :smart_credentials
      end

      group from: :<%= capability_statement_group_id %>
  <% group_id_list.each do |id| %>
      group from: :<%= id %><% end %>

    end
  end
end
